# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Hub Movies - Build & Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  checkout:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: git fetch --no-tags --prune --depth=5 origin master
  install:
    needs: checkout
    steps:
      - uses: actions/cache@v2
        id: npm-cache
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-npm-${{ hashFiles('./package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm
      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        env:
          HUSKY_SKIP_INSTALL: 'true'
        run: npm install
      - name: Lint Application
        run: npm run ng lint

      - name: Test Application
        run: npm run ng test -- --no-watch --no-progress --browsers=ChromeHeadlessCI

      - name: Build Application
        run: npm run ng build -- --configuration production --stats-json

      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist--hub-movies
          path: |
            dist/hub-movies

      - name: Archive bundle-report artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bundle-report--hub-movies
          path: dist/hub-movies/stats.json

      - name: Collect lhci report in github
        run: npm run -s lhci:collect

      - name: Archive lhci report artifacts
        uses: actions/upload-artifact@v2
        with:
          name: lhci-report--hub-movies
          path: |
            .lighthouseci
            !.lighthouseci/db.sql

      - uses: EndBug/add-and-commit@v4 # You can change this to use a specific version
        with:
          add: '.lighthouseci/db.sql'
          force: true
          author_name: LHC Audit
          message: 'perf: lighthouse-ci upload'
          # Whether to use the --force option on `git add`, in order to bypass eventual gitignores
          # Default: false
          #force: true
          # Name of the branch to use, if different from the one that triggered the workflow
          # Default: the branch that triggered the workflow (from GITHUB_REF)
          # ref: 'branch-name'
        env:
          # This is necessary in order to push a commit to the repo
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Leave this line unchanged


   #   - name: Audit build using Lighthouse
   #     uses: treosh/lighthouse-ci-action@v7
   #     env:
   #       LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
   #       # LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}
   #     with:
   #       configPath: './lighthouserc.js'
   #       # budgetPath: ./budget.json # test performance budgets
   #       uploadArtifacts: true # save results as an action artifacts



    # TODO add link to report
    #  - uses: tzkhan/pr-update-action@v2
    #    with:
    #      repo-token: "${{ secrets.GITHUB_TOKEN }}"
    #      head-branch-regex: '.+'
    #      body-template: "[PR LHCI report](${{ steps.LHCIAction.outputs.links }}) | ${{ steps.LHCIAction.outputs.links }}"
    #      body-update-action: 'suffix'
